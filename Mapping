import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

# Load the taxi zones data
taxi_zones = gpd.read_file(r'C:\Users\MSI-Pc\Desktop\Summer project\NYC Taxi Zones.geojson')

# Filter out the data to only include Manhattan
manhattan_zones = taxi_zones[taxi_zones['borough'] == 'Manhattan'].copy()

if manhattan_zones.crs is None:
    manhattan_zones.set_crs("EPSG:4326", inplace=True)

# Load the station data
stations = pd.read_csv(r'C:\Users\MSI-Pc\Desktop\Summer project\MTA_Subway_Hourly_Ridership__Beginning_February_2022.csv')

# Create a GeoDataFrame for the stations data
stations_gdf = gpd.GeoDataFrame(
    stations, geometry=gpd.points_from_xy(stations.longitude, stations.latitude))

# Set the CRS for the stations GeoDataFrame to match the taxi zones GeoDataFrame
stations_gdf.set_crs(manhattan_zones.crs, inplace=True)

# Use a spatial join to map stations to taxi zones
stations_in_zones = gpd.sjoin(stations_gdf, manhattan_zones, predicate='within')

# Group stations by LocationID and extract the station_complex values as a list, removing duplicates
zone_to_stations = stations_in_zones.groupby('location_id')['station_complex'].apply(lambda x: list(set(x))).to_dict()

# Display the list of stations for each taxi zone
for zone_id, stations_list in zone_to_stations.items():
    print(f"Taxi Zone ID {zone_id}:", stations_list)

# Plot the map
fig, ax = plt.subplots(1, 1)
manhattan_zones.plot(ax=ax, color='white', edgecolor='black')
stations_in_zones.plot(ax=ax, color='red')
plt.show()

# Calculate pickup busyness
pickup_grouped = df.groupby(['PULocationID', 'pickup_hour']).agg({'passenger_count': ['sum', 'count']}).reset_index()
pickup_grouped.columns = ['zone', 'hour', 'total_passengers', 'total_rides']
pickup_grouped['pickup_busyness'] = pickup_grouped['total_rides'] * (pickup_grouped['total_passengers'] / pickup_grouped['total_rides'])
pickup_total_busyness = pickup_grouped.groupby('hour')['pickup_busyness'].transform('sum')
pickup_grouped['pickup_busyness'] = pickup_grouped['pickup_busyness'] / pickup_total_busyness

# Calculate drop-off busyness
dropoff_grouped = df.groupby(['DOLocationID', 'pickup_hour']).agg({'passenger_count': ['sum', 'count']}).reset_index()
dropoff_grouped.columns = ['zone', 'hour', 'total_passengers', 'total_rides']
dropoff_grouped['dropoff_busyness'] = dropoff_grouped['total_rides'] * (dropoff_grouped['total_passengers'] / dropoff_grouped['total_rides'])
dropoff_total_busyness = dropoff_grouped.groupby('hour')['dropoff_busyness'].transform('sum')
dropoff_grouped['dropoff_busyness'] = dropoff_grouped['dropoff_busyness'] / dropoff_total_busyness

# Merge pickup and dropoff data
busyness_df = pd.merge(pickup_grouped, dropoff_grouped, on=['zone', 'hour'], how='outer')

# Fill NaN values with 0 (zones and hours with no pickups/dropoffs)
busyness_df.fillna(0, inplace=True)

# Calculate total busyness
busyness_df['busyness'] = busyness_df['pickup_busyness'] + busyness_df['dropoff_busyness']

# Display the dataframe
print(busyness_df)

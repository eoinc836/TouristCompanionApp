import pandas as pd
import numpy as np
import holidays
from itertools import product 

# Load the dataset
df = pd.read_csv(r'C:\Users\MSI-Pc\Desktop\2022 TLC data\2022_combined_data.csv', low_memory=False)
print("First 5 rows of original dataframe:")
print(df.head())
print("\nLast 5 rows of original dataframe:")
print(df.tail())

# Define Manhattan zones
manhattan_zones = [262, 261, 249, 246, 244, 243, 263, 238, 237, 236, 234, 233, 232, 239, 231, 230, 229, 224, 211, 209, 202, 194, 186, 166, 170, 164, 163, 162, 161, 158, 153, 148, 144, 143, 152, 142, 141, 137, 140, 151, 128, 127, 120, 116, 114, 113, 107, 103, 100, 125, 90, 88, 87, 75, 74, 79, 68, 50, 48, 43, 42, 45, 41, 13, 12, 24, 4]

# Keep only relevant columns
df = df[['tpep_pickup_datetime', 'tpep_dropoff_datetime', 'passenger_count', 'PULocationID', 'DOLocationID', 'congestion_surcharge']]

# Remove duplicates
original_size = df.shape[0]
df.drop_duplicates(inplace=True)
print(f"\nNumber of duplicate rows removed: {original_size - df.shape[0]}")

# Remove missing values
original_size = df.shape[0]
df.dropna(inplace=True)
print(f"Number of rows with missing values removed: {original_size - df.shape[0]}")

# Drop rows where drop-off time is before pick-up time
df = df[df['tpep_dropoff_datetime'] > df['tpep_pickup_datetime']]

# Keep only rows where either pick up or drop off is in Manhattan zones
df = df[(df['PULocationID'].isin(manhattan_zones)) | (df['DOLocationID'].isin(manhattan_zones))]

# Convert datetime columns to datetime format and handle AM/PM entries
df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])

# Add derived columns
df['pickup_hour'] = df['tpep_pickup_datetime'].dt.round('H').dt.hour
df['is_weekday'] = np.where(df['tpep_pickup_datetime'].dt.weekday < 5, 1, 0)
df['is_weekend'] = np.where(df['tpep_pickup_datetime'].dt.weekday >= 5, 1, 0)

us_holidays = holidays.US(state='NY')
df['is_holiday'] = df['tpep_pickup_datetime'].dt.date.apply(lambda x: 1 if x in us_holidays else 0)

# Define seasons based on month
seasons = {12: 'Winter', 1: 'Winter', 2: 'Winter', 3: 'Spring', 4: 'Spring', 5: 'Spring', 6: 'Summer', 7: 'Summer', 8: 'Summer', 9: 'Autumn', 10: 'Autumn', 11: 'Autumn'}
df['season'] = df['tpep_pickup_datetime'].dt.month.map(seasons)

df['day_of_week'] = df['tpep_pickup_datetime'].dt.day_name()

df['same_zone_trip'] = np.where(df['PULocationID'] == df['DOLocationID'], 1, 0)

# Calculate busyness (considering Pickups, Drop-offs & Passenger Count)
df['pickup_busyness'] = df.groupby(['PULocationID', 'pickup_hour'])['passenger_count'].transform('sum')
df['dropoff_busyness'] = df.groupby(['DOLocationID', 'pickup_hour'])['passenger_count'].transform('sum')
df['busyness'] = df['pickup_busyness'] + df['dropoff_busyness']

# Aggregate data by datetime, pickup_hour, location and other attributes
df['pickup_date'] = df['tpep_pickup_datetime'].dt.date
df_agg = df.groupby(['pickup_date', 'pickup_hour', 'PULocationID', 'is_weekday', 'is_weekend', 'is_holiday', 'season', 'day_of_week'])['busyness'].sum().reset_index()

# Rename columns for clarity
df_agg.rename(columns={'PULocationID': 'LocationID', 'pickup_date': 'datetime'}, inplace=True)

# Convert 'datetime' to datetime format
df_agg['datetime'] = pd.to_datetime(df_agg['datetime'])

# Copy of processed data set
df.to_csv(r'C:\Users\MSI-Pc\Desktop\2022 TLC data\2022_combined_data_pre_agg.csv', index=False)

# Generate a DataFrame with every hour of the year for each zone
all_dates = pd.date_range(start='2022-01-01', end='2022-12-31 23:00:00', freq='H')
all_zones = manhattan_zones
df_all_hours = pd.DataFrame(list(product(all_dates, all_zones)), columns=['datetime', 'LocationID'])
df_all_hours['pickup_hour'] = df_all_hours['datetime'].dt.hour
df_all_hours['is_weekday'] = np.where(df_all_hours['datetime'].dt.weekday < 5, 1, 0)
df_all_hours['is_weekend'] = np.where(df_all_hours['datetime'].dt.weekday >= 5, 1, 0)
df_all_hours['is_holiday'] = df_all_hours['datetime'].dt.date.apply(lambda x: 1 if x in us_holidays else 0)
df_all_hours['season'] = df_all_hours['datetime'].dt.month.map(seasons)
df_all_hours['day_of_week'] = df_all_hours['datetime'].dt.day_name()

# Merge with the aggregated DataFrame
df_agg_full = pd.merge(df_all_hours, df_agg, on=['datetime', 'LocationID', 'pickup_hour', 'is_weekday', 'is_weekend', 'is_holiday', 'season', 'day_of_week'], how='left')

# Replace NaNs with 0s (these are the hours with no taxi activity)
df_agg_full['busyness'].fillna(0, inplace=True)

# Save the processed dataset
df_agg_full.to_csv(r'C:\Users\MSI-Pc\Desktop\2022 TLC data\2022_combined_data_processed_full.csv', index=False)

# Print first 5 rows
print("\nFirst 5 rows of the full aggregated dataframe:")
print(df_agg_full.head())

# Print last 5 rows
print("\nLast 5 rows of the full aggregated dataframe:")
print(df_agg_full.tail())

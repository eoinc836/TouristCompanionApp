import pandas as pd
import numpy as np
from pandas.tseries.holiday import USFederalHolidayCalendar

# Load the CSV file without parsing dates
file_path = 'C:/Users/MSI-Pc/Desktop/2019 TLC data/selected_2019data_clean1.csv'
df = pd.read_csv(file_path, low_memory=False)

# Print the initial number of rows
print("Initial number of rows: ", len(df))

# Check for non-numeric values in the 'passenger_count' and 'trip_distance' columns and remove them
initial_rows = len(df)
df['passenger_count'] = pd.to_numeric(df['passenger_count'], errors='coerce')
df['trip_distance'] = pd.to_numeric(df['trip_distance'], errors='coerce')
df = df.dropna(subset=['passenger_count', 'trip_distance'])
filtered_rows = initial_rows - len(df)
print(f"Rows removed due to non-numeric passenger count or trip distance: {filtered_rows}")

df['passenger_count'] = df['passenger_count'].astype(int)

# Parse 'tpep_pickup_datetime' and 'tpep_dropoff_datetime' to datetime 
date_format = "%m/%d/%Y %I:%M:%S %p"
initial_rows = len(df)
df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'], format=date_format, errors='coerce')
df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'], format=date_format, errors='coerce')
df = df.dropna(subset=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])
filtered_rows = initial_rows - len(df)
print(f"Rows removed due to date-time format issues: {filtered_rows}")

# Remove rows where pickup time is after drop off time
initial_rows = len(df)
df = df[df['tpep_pickup_datetime'] <= df['tpep_dropoff_datetime']]
filtered_rows = initial_rows - len(df)
print(f"Rows removed based on pickup and drop off times: {filtered_rows}")

# Add a column for hour, day of week, season, is_weekday, is_holiday, is_weekend
df['pickup_hour'] = df['tpep_pickup_datetime'].dt.hour
df['day_of_week'] = df['tpep_pickup_datetime'].dt.dayofweek
df['season'] = (df['tpep_pickup_datetime'].dt.month%12 + 3)//3
df['is_weekday'] = np.where(df['day_of_week'].isin(range(5)), 1, 0)
df['is_weekend'] = np.where(df['day_of_week'].isin([5, 6]), 1, 0)

# Calculate if the day is a holiday
calendar = USFederalHolidayCalendar()
holidays = calendar.holidays(start=df['tpep_pickup_datetime'].min(), end=df['tpep_pickup_datetime'].max())
holidays = holidays.date.tolist()  # convert to date format
df['is_holiday'] = df['tpep_pickup_datetime'].dt.date.apply(lambda x: x in holidays)

# Add column indicating if trip started and ended in the same zone
df['same_zone'] = np.where(df['PULocationID'] == df['DOLocationID'], 1, 0)

# Save the cleaned dataframe to a new CSV file
df.to_csv('C:/Users/MSI-Pc/Desktop/2019 TLC data/selected_2019data_clean2.csv', index=False)
